name: Release executables

on:
  push:
    tags:
      - "*"

env:
  cmake_configure_args: -D WARNINGS_AS_ERRORS_FOR_EASY_FFMPEG=OFF
  cmakelists_folder: tests
  cmake_target: easy_ffmpeg-tests

jobs:
  build-executables:
    name: Build-${{matrix.config.name}}-${{matrix.build_type}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
          #   - {
          #       name: Windows-MSVC,
          #       os: windows-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=cl CMAKE_CXX_COMPILER=cl,
          #     }
          #   - {
          #       name: Windows-Clang,
          #       os: windows-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang,
          #     }
          #   - {
          #       name: Windows-GCC,
          #       os: windows-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++,
          #     }
          #   - {
          #       name: Linux-Clang,
          #       os: ubuntu-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++,
          #     }
          #   - {
          #       name: Linux-GCC,
          #       os: ubuntu-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=gcc-12 -D CMAKE_CXX_COMPILER=g++-12,
          #     }
          - {
              name: MacOS-Clang,
              os: macos-12,
              cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++,
            }
        #   - {
        #       name: MacOS GCC,
        #       os: macos-12,
        #       cmake_configure_args: -D CMAKE_C_COMPILER=gcc-13 -D CMAKE_CXX_COMPILER=g++-13,
        #     }
        build_type:
          - Debug
        #   - Release

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Check install ffmpeg1
        if: runner.os == 'MacOS'
        run: |
          mkdir my_ffmpeg
      - name: Check install ffmpeg2
        if: runner.os == 'MacOS'
        run: |
          export HOMEBREW_PREFIX=my_ffmpeg
      - name: Check install ffmpeg3
        if: runner.os == 'MacOS'
        run: |
          brew install ffmpeg
      - name: Check install ffmpeg5
        if: runner.os == 'MacOS'
        run: |
          ls my_ffmpeg

      - name: List deps dynlib MacOS
        if: runner.os == 'MacOS'
        run: otool -L lib/ffmpeg-macos/lib/libavcodec.61.dylib

      - name: Set up MSVC # NOTE: required to find cl.exe and clang.exe when using the Ninja generator. And we need to use Ninja in order for ccache to be able to cache stuff on Windows.
        if: runner.os == 'Windows' && matrix.config.name != 'Windows GCC'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      # Temporary workaround for Linux Clang not working atm. See https://github.com/actions/runner-images/issues/8659
      - uses: mjp41/workaround8649@c8550b715ccdc17f89c8d5c28d7a48eeff9c94a8
        with:
          os: ${{ matrix.config.os }}

          # TODO remove
      #   - name: Install FFmpeg for MacOS
      #     if: runner.os == 'MacOS'
      #     run: brew install ffmpeg
      - name: Install FFmpeg for Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev

      #   - name: ccache
      #     uses: hendrikmuhs/ccache-action@main
      #     with:
      #       key: ${{matrix.config.name}}-${{matrix.build_type}}

      #   - name: Build
      #     uses: lukka/run-cmake@v3
      #     with:
      #       cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
      #       cmakeListsTxtPath: ${{github.workspace}}/${{env.cmakelists_folder}}/CMakeLists.txt
      #       cmakeAppendedArgs: ${{env.cmake_configure_args}} -G Ninja -D CMAKE_BUILD_TYPE=${{matrix.build_type}} ${{matrix.config.cmake_configure_args}} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
      #       buildWithCMakeArgs: --config ${{matrix.build_type}} --target ${{env.cmake_target}}
      #       cmakeBuildType: ${{matrix.build_type}}
      #       buildDirectory: ${{github.workspace}}/build

      #   - name: List deps linux
      #     if: runner.os == 'Linux'
      #     run: ldd out/${{env.cmake_target}}
      #   - name: List deps MacOS
      #     if: runner.os == 'MacOS'
      #     run: otool -L out/${{env.cmake_target}}

      - name: Make zip for Linux and Mac
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        run: zip -r ${{matrix.config.name}}-${{matrix.build_type}}.zip my_ffmpeg/

      - name: Make zip for Windows
        if: runner.os == 'Windows'
        run: Compress-Archive -Path out -DestinationPath ${{matrix.config.name}}-${{matrix.build_type}}.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{matrix.config.name}}-${{matrix.build_type}}.zip

  run-executables-linux-mac:
    needs: build-executables
    name: Run-${{matrix.config.name}}-${{matrix.build_type}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
          #   - {
          #       name: Linux-Clang,
          #       os: ubuntu-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++,
          #     }
          #   - {
          #       name: Linux-GCC,
          #       os: ubuntu-latest,
          #       cmake_configure_args: -D CMAKE_C_COMPILER=gcc-12 -D CMAKE_CXX_COMPILER=g++-12,
          #     }
          - {
              name: MacOS-Clang,
              os: macos-12,
              cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++,
            }
        #   - {
        #       name: MacOS GCC,
        #       os: macos-12,
        #       cmake_configure_args: -D CMAKE_C_COMPILER=gcc-13 -D CMAKE_CXX_COMPILER=g++-13,
        #     }
        build_type:
          - Debug
        #   - Release

    steps:
      - name: Download Zip File
        run: wget https://github.com/CoolLibs/easy_ffmpeg/releases/download/${{github.ref_name}}/${{matrix.config.name}}-${{matrix.build_type}}.zip

      - name: Unzip
        run: unzip ${{matrix.config.name}}-${{matrix.build_type}}.zip -d extracted

      - name: Run Exe
        run: |
          chmod +x extracted/out/${{env.cmake_target}}
          ./extracted/out/${{env.cmake_target}}

#   run-executables-windows:
#     needs: build-executables
#     name: Run-${{matrix.config.name}}-${{matrix.build_type}}
#     runs-on: ${{matrix.config.os}}
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#           - {
#               name: Windows-MSVC,
#               os: windows-latest,
#               cmake_configure_args: -D CMAKE_C_COMPILER=cl CMAKE_CXX_COMPILER=cl,
#             }
#           - {
#               name: Windows-Clang,
#               os: windows-latest,
#               cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang,
#             }
#           - {
#               name: Windows-GCC,
#               os: windows-latest,
#               cmake_configure_args: -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++,
#             }
#         build_type:
#           - Debug
#           - Release

#     steps:
#       - name: Download Zip File
#         run: Invoke-WebRequest -Uri https://github.com/CoolLibs/easy_ffmpeg/releases/download/${{github.ref_name}}/${{matrix.config.name}}-${{matrix.build_type}}.zip -OutFile "downloaded.zip"

#       - name: Unzip
#         run: unzip downloaded.zip -d extracted

#       - name: Run Exe
#         run: ./extracted/out/${{env.cmake_target}}
